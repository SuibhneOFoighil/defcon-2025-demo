/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve the ludus version
         * @description Returns the ludus version
         *
         */
        get: operations["index"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ansible": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve available Ansible roles and collections
         * @description Returns available Ansible roles installed for this
         *     user on the ludus host
         *
         */
        get: operations["getRolesAndCollections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ansible/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Install or Remove an Ansible role
         * @description Install or Remove an ansible role by name or URL.
         *     Admins can pass a userID parameter to install a role for other users
         *     Action can be either "install or "remove".
         *
         */
        post: operations["InstallRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ansible/role/fromtar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Install an Ansible role from local directory
         * @description Install an ansible role from a local directory.
         *     Admins can pass a userID parameter to install a role for other users.
         *
         */
        put: operations["InstallRoleTar"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ansible/collection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Install an Ansible collection
         * @description Install an ansible collection by name or URL.
         *     Admins can pass a userID parameter to install a collection for other users.
         *     Ansible collections can only be removed by rm-ing their directories. This is not supported via Ludus due to potential edge cases in naming depending on how the collection was installed.
         *
         */
        post: operations["InstallCollection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user details
         * @description Get a single user object (default: the caller's). Specify a specific user to get with the userID query parameter. To get all users, the caller must be an admin and must use the /user/all endpoint.
         *
         */
        get: operations["listUser"];
        put?: never;
        /**
         * Add a user to the system
         * @description Adds a user to the system. This action is only available to admins.
         *     Note: this response will contain the plaintext API key for the user.
         *     It will not be available again except by resetting it using the /user/apikey endpoint.
         *
         */
        post: operations["addUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{userID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a user from the system
         * @description Removes a user from the system. This action is only available to admins.
         *
         */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/passwordreset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset a user's proxmox password
         * @description Resets a user's proxmox password.
         *     This action is only available to admins.
         *
         */
        post: operations["passwordReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get proxmox creds for a user
         * @description Get proxmox credentials for a user
         *
         */
        get: operations["getCredentials"];
        put?: never;
        /**
         * Set the proxmox creds for the user
         * @description Set the proxmox password for a user. userID is optional and only can be set
         *     to other user's userIDs by admins.
         *
         */
        post: operations["postCredentials"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/apikey": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reset and retrieve the Ludus API key for a user
         * @description Reset and return the API key for the user specified in the query. By default this will reset the caller's API key. To reset a specific user's API key, specify their userID using the query parameter userID.
         *
         */
        get: operations["getAPIKey"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all users
         * @description Get all users in Ludus. Available only to admins
         *
         */
        get: operations["listAllUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/wireguard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a WireGuard configuration file for a user
         * @description Returns a WireGuard configuration file with appropriate
         *     values for the user's range
         *
         *     "WireGuard" is the registered trademark of Jason A. Donenfeld.
         *
         */
        get: operations["getWireguardConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List range VMs, power state, and testing state
         * @description Lists a range's VMs along with their power state and the testing state
         *     of the range. Admins can use the query parameter userID to inspect
         *     other users' ranges.
         *
         */
        get: operations["listRange"];
        put?: never;
        post?: never;
        /**
         * Stop and delete all range VMs
         * @description Stops and deletes all the range VMs. Used to start fresh.
         */
        delete: operations["deleteRange"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/abort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop the range deployment ansible process
         * @description Stops the range deployment by finding the pid of the ansible
         *     process for the user and killing it. Admins may call this and
         *     specify another user ID.
         *
         */
        post: operations["abortRange"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all tags available to use with deploy
         * @description List all the ansible tags a user can specify with the deploy command
         *
         */
        get: operations["listRangeTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List summary information for all ranges
         * @description Lists all range's VMs along with their power state and the testing state
         *     of the range. This endpoint is only available to admins.
         *
         */
        get: operations["listAllRange"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve range configuration
         * @description Returns the current configuration for the range
         *
         */
        get: operations["getConfig"];
        /**
         * Update the range configuration
         * @description Updates the range configuration with the provided yaml file
         *
         */
        put: operations["putConfig"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/config/example": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an example range configuration
         * @description Returns an example configuration for the range with the user's
         *     userID in vm_name and hostname fields
         *
         */
        get: operations["getConfigExample"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deploy the range
         * @description Deploys a range with ansible. This can be called multiple times
         *     without issue without changing the range configuration without causing
         *     issues. The tags value is optional, by default "all" is run. The force
         *     value is optional, by default it is false.
         *
         */
        post: operations["deployRange"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve the latest range logs
         * @description Returns the latest logs for the range
         *
         */
        get: operations["getLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/etchosts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve /etc/hosts file for the range
         * @description Returns an /etc/hosts file with appropriate values for the user's range
         *
         */
        get: operations["getEtcHosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/sshconfig": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a ssh config
         * @description Returns a ssh configuration file with appropriate values for the user's range
         *
         */
        get: operations["getSSHConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/rdpconfigs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a zip file of RDP configs
         * @description Returns a zip file with RDP configuration files for the Windows
         *     VMs in a user's range
         *
         */
        get: operations["getRDP"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/ansibleinventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an ansible inventory
         * @description Returns an ansible inventory file with appropriate values for the user's range
         *
         */
        get: operations["getAnsibleInventory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an array of current range access settings
         * @description Returns an array of the current state of cross-range access on the Ludus host - Admin only endpoint
         *
         */
        get: operations["rangeAccessList"];
        put?: never;
        /**
         * Grant or revoke range access
         * @description Grant or revoke range access from one user to another - Admin only endpoint
         *
         */
        post: operations["rangeAccessAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/poweron": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Power on range VMs
         * @description Power on one, multiple, or all range VMs.
         *     passing the machine parameter "all" will operate on all VMs in the user's range.
         *     Admins can pass a userID parameter to control other user's ranges.
         *
         */
        put: operations["powerOnRange"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/range/poweroff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Power off range VMs
         * @description Power off one, multiple, or all range VMs.
         *     Passing the machine parameter "all" will operate on all VMs in the user's range.
         *     Admins can pass a userID parameter to control other user's ranges.
         *
         */
        put: operations["powerOffRange"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/testing/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Snapshot and enter testing state
         * @description Uses ansible to snapshot all test_range VMs and block all outbound
         *     traffic and DNS requests from the test range subnet.
         *     Admins can pass a userID parameter to control other user's ranges.
         *
         */
        put: operations["startTesting"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/testing/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Revert and exit testing state
         * @description Uses ansible to revet all test_range VMs and allow all outbound
         *     traffic and DNS requests from the test range subnet.
         *     Admins can pass a userID parameter to control other user's ranges.
         *     The force parameter will ignore errors when reverting snapshots.
         *     Setting force to true may leak telemetry or other data about your
         *     payloads.
         *
         */
        put: operations["stopTesting"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/testing/allow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Allow a domain
         * @description Looks up the domain and its HTTPS certificate CRL domains adding all the
         *     IPs to iptables allow as well as to a DNS allow list.
         *
         */
        post: operations["allow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/testing/deny": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deny a domain
         * @description Removes iptables and DNS rules that allow a domain/ip
         *     through the firewall. Note that this does NOT deny CRL
         *     domains as they may be shared my multiple domains.
         *
         */
        post: operations["deny"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/testing/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update a VM or group
         * @description Runs the ansible update routine on a VM or group of VMs specified
         *     by the user in the request body. (Windows only)
         *
         */
        post: operations["update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/antisandbox/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable anti-sandbox for a VM or multiple VMs (enterprise)
         * @description Modifieds the given VM names or VM IDs to not look like virtualized
         *     sandbox hosts. (Enterrpise and Windows only)
         *
         */
        post: operations["antiSandboxEnable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/antisandbox/install-custom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Install the custom QEMU/OMVF packages
         * @description Installs the modified QEMU and OVMF packages that presents as Dell hardware (Enterprise only)
         *
         */
        post: operations["antiSandboxInstallCustom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/antisandbox/install-standard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Install the standard QEMU/OMVF packages
         * @description Installs the standard QEMU and OVMF packages (Enterprise only)
         *
         */
        post: operations["antiSandboxInstallStandard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of VM templates
         * @description Returns a list of VM templates that have been built in Ludus. These
         *     templates can be used in a range config and deployed via Ludus.
         *
         */
        get: operations["getTemplates"];
        /**
         * Install an Ansible role from local directory
         * @description Add a template to ludus
         *
         */
        put: operations["addTemplateFromTar"];
        /**
         * Build templates
         * @description Starts the packer template build process. Monitor with the templates/log
         *     endpoint. Specify a specific template or 'all'.
         *
         */
        post: operations["buildTemplates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/template/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a template
         * @description Delete a template. Users may not delete system templates.
         */
        delete: operations["deleteTemplate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/abort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Kill packer processes for user
         * @description Kills any running packer processes for the user,
         *     or the user given in the query string (admin only).
         *
         */
        post: operations["abortTemplates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve the latest packer logs
         * @description Returns the latest logs from packer
         *
         */
        get: operations["getPackerLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the status of packer builds
         * @description Returns a list of templates that are currently being built
         *
         */
        get: operations["getTemplatesStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/snapshots/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all snapshots for a range
         * @description Returns a list of snapshots for a range
         *
         */
        get: operations["getSnapshots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/snapshots/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Take a snapshot of a VM or multiple VMs
         * @description Takes a snapshot of one or more VMs as specified by VMID(s)
         *
         */
        post: operations["snapshotsTake"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/snapshots/rollback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Roll back to a snapshot of a VM or multiple VMs
         * @description Rolls back one or more VMs as specified by VMID(s) to a specified snapshot
         *
         */
        post: operations["snapshotsRollback"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/snapshots/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete a snapshot from a VM or multiple VMs
         * @description Deletes a snapshot from one or more VMs as specified by VMID(s)
         *
         */
        post: operations["snapshotsRemove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kms/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup the KMS VM and install the KMS server
         * @description Creates a KMS VM in the ADMIN pool at 192.0.2.1 and installs the KMS server (Enterprise only)
         *
         */
        post: operations["kmsInstall"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kms/license": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * License Windows VMs using the KMS server
         * @description License one or more Windows VMs using the KMS server (Enterprise only)
         *
         */
        post: operations["kmsLicense"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all groups
         * @description Returns a list of all groups in Ludus.
         */
        get: operations["listGroups"];
        put?: never;
        /**
         * Create a new group
         * @description Creates a new group in Ludus.
         */
        post: operations["createGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{groupID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a group
         * @description Deletes a group by groupID.
         */
        delete: operations["deleteGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{groupID}/users/{userID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add user to group
         * @description Adds a user to a group.
         */
        post: operations["addUserToGroup"];
        /**
         * Remove user from group
         * @description Removes a user from a group.
         */
        delete: operations["removeUserFromGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{groupID}/ranges/{rangeNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add range to group
         * @description Adds a range to a group.
         */
        post: operations["addRangeToGroup"];
        /**
         * Remove range from group
         * @description Removes a range from a group.
         */
        delete: operations["removeRangeFromGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{groupID}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List group members
         * @description Lists all users in a group.
         */
        get: operations["listGroupMembers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{groupID}/ranges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List group ranges
         * @description Lists all ranges in a group.
         */
        get: operations["listGroupRanges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ranges/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new range (admin only)
         * @description Creates a new range. Admin only.
         */
        post: operations["createRange"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ranges/assign/{userID}/{rangeNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign a range to a user (admin only)
         * @description Assigns a range to a user. Admin only.
         */
        post: operations["assignRangeToUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ranges/revoke/{userID}/{rangeNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke range access from a user (admin only)
         * @description Revokes a user's access to a range. Admin only.
         */
        delete: operations["revokeRangeFromUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ranges/users/{rangeNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users with access to a range (admin only)
         * @description Lists all users with access to a range. Admin only.
         */
        get: operations["listRangeUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ranges/accessible": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ranges accessible to the user
         * @description Lists all ranges accessible to the current user.
         */
        get: operations["listUserAccessibleRanges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/migrate/sqlite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Migrate SQLite to PostgreSQL
         * @description Migrates Ludus data from SQLite to PostgreSQL.
         */
        post: operations["migrateSQLiteToPostgreSQL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description Must be a unique 1-20 character alpha-numeric string.
         *     Initials are commonly used.
         *
         * @example JD
         */
        userID: string;
        UserObject: {
            /** @example John Doe */
            name: string;
            userID: components["schemas"]["userID"];
            /**
             * Format: date-time
             * @example 2022-08-29T09:12:33.001Z
             */
            readonly dateCreated?: string;
            /**
             * Format: date-time
             * @example 2022-08-29T09:12:33.001Z
             */
            readonly dateLastActive?: string;
            /** @example true */
            isAdmin: boolean;
            /** @example john-doe */
            readonly proxmoxUsername?: string;
        };
        UserAPIKeyObject: {
            /** @example G0rO+G+8Zlu%CAEDyYC2ZdW3pBWW+al,J2_tli1h */
            readonly apiKey?: string;
        };
        /** @example {
         *       "proxmoxPassword": "5cy5@plhik4g&Yk12sG",
         *       "proxmoxUsername": "john-doe"
         *     } */
        UserCredentialObject: {
            /** @example john-doe */
            readonly proxmoxUsername?: string;
            /** @example 5cy5@plhik4g&Yk12sG */
            readonly proxmoxPassword?: string;
        };
        RangeObject: {
            userID: components["schemas"]["userID"];
            /**
             * Format: int32
             * @example 3
             */
            readonly rangeNumber: number;
            /**
             * Format: date-time
             * @example 2022-08-29T09:12:33.001Z
             */
            readonly lastDeployment: string;
            /**
             * Format: int32
             * @example 7
             */
            readonly numberOfVMs: number;
            /** @example true */
            readonly testingEnabled: boolean;
            allowedIPs?: string[];
            allowedDomains?: string[];
            /** @example SUCCESS */
            rangeState?: string;
            VMs: components["schemas"]["VMObject"][];
        };
        VMObject: {
            /**
             * Format: int32
             * @example 53
             */
            readonly ID: number;
            /**
             * Format: int32
             * @example 146
             */
            readonly proxmoxID: number;
            /**
             * Format: int32
             * @example 3
             */
            readonly rangeNumber: number;
            /** @example JD-ad-dc-win2019-server-x64 */
            name: string;
            /** @example true */
            poweredOn: boolean;
            ip?: components["schemas"]["IP"];
            isRouter?: boolean;
        };
        /**
         * @description A domain to allow during testing (along with HTTPS CRL domains)
         * @example example.com
         */
        Domain: string;
        /** @example 203.0.113.4 */
        IP: string;
        AllowPayload: {
            domains?: components["schemas"]["Domain"][];
            ips?: components["schemas"]["IP"][];
        };
        SnapshotInfo: {
            /**
             * @description Snapshot identifier. Value 'current' identifies the current VM
             * @example My snapshot
             */
            name?: string;
            /**
             * @description 1 if the snapshot includes RAM, 0 if it does not
             * @example true
             */
            includesRAM?: boolean;
            /**
             * @description Description of the snapshot
             * @example Took this snapshot before testing something
             */
            description?: string;
            /**
             * Format: uint
             * @description Snapshot creation time (unix)
             * @example 1740779020
             */
            snaptime?: number;
            /**
             * @description Parent snapshot identifier
             * @example Other snapshot
             */
            parent?: string;
            /**
             * Format: int32
             * @description The VMID of the VM
             * @example 179
             */
            vmid?: number;
            /**
             * @description The name of the VM
             * @example JD-ad-win11-22h2-enterprise-x64-1
             */
            vmname?: string;
        };
        ErrorInfo: {
            /**
             * Format: int32
             * @description The VMID of the VM
             * @example 180
             */
            vmid?: number;
            /**
             * @description The name of the VM
             * @example JD-ad-win11-22h2-enterprise-x64-2
             */
            vmname?: string;
            /**
             * @description Error message
             * @example Error parsing VM ID abc: strconv.Atoi: parsing "abc": invalid syntax
             */
            error?: string;
        };
        SnapshotCreatePayload: {
            /**
             * @description Snapshot name
             * @example My cool snapshot
             */
            name?: string;
            /**
             * @description Snapshot Description
             * @example Taking this snapshot before doing some testing
             */
            description?: string;
            /**
             * @description Array of VMIDs to snapshot, if blank all VMs in the range will be snapshotted
             * @example [
             *       179,
             *       180
             *     ]
             */
            vmids?: number[];
            /**
             * @description Include RAM in the snapshot. If false, the VM will be powered off when restored to this snapshot.
             * @example true
             */
            includeRAM?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description index */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Ludus Server v1.0.0+abc123a */
                        result?: string;
                    };
                };
            };
        };
    };
    getRolesAndCollections: {
        parameters: {
            query?: {
                /** @description pass an optional userID to get roles and collections for a specific user */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Available roles and collections */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example geerlingguy.java */
                        name?: string;
                        /** @example 2.3.2 */
                        version?: string;
                        /** @example role */
                        type?: string;
                        /** @example false */
                        global?: boolean;
                    }[];
                };
            };
        };
    };
    InstallRole: {
        parameters: {
            query?: {
                /** @description pass an optional userID to install for.
                 *     Defaults to the user's range (admins can interact with other users' ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example geerlingguy.java */
                    role?: string;
                    /** @example 2.3.2 */
                    version?: string;
                    /** @example true */
                    force?: boolean;
                    /** @example install */
                    action?: string;
                    /** @example false */
                    global?: boolean;
                };
            };
        };
        responses: {
            /** @description role installed */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Successfully installed: geerlingguy.java */
                        result?: string;
                    };
                };
            };
            /** @description Unauthorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example You are not authorized to perform this ansible action */
                        error?: string;
                    };
                };
            };
            /** @description Error installing role */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Unable to install the ansible role: geerlingguy.java */
                        error?: string;
                    };
                };
            };
        };
    };
    InstallRoleTar: {
        parameters: {
            query?: {
                /** @description pass an optional userID to install for.
                 *     Defaults to the user's range (admins can interact with other users' ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: string;
                    /** @example false */
                    force?: boolean;
                };
            };
        };
        responses: {
            /** @description role installed */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Successfully installed role */
                        result?: string;
                    };
                };
            };
            /** @description Error installing role - bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Invalid boolean value */
                        error?: string;
                    };
                };
            };
            /** @description Unauthorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example You are not authorized to perform this ansible action */
                        error?: string;
                    };
                };
            };
            /** @description Error installing role - server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Unable to install the ansible role: <error> */
                        error?: string;
                    };
                };
            };
        };
    };
    InstallCollection: {
        parameters: {
            query?: {
                /** @description pass an optional userID to install for.
                 *     Defaults to the user's range (admins can interact with other users' ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example maxhoesel.smallstep */
                    collection?: string;
                    /** @example 0.23.1 */
                    version?: string;
                    /** @example true */
                    force?: boolean;
                };
            };
        };
        responses: {
            /** @description collection installed */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Successfully installed: maxhoesel.smallstep */
                        result?: string;
                    };
                };
            };
            /** @description Collection already installed */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Collection already installed. Collections from https://docs.ansible.com/ansible/latest/collections/index.html are installed globally. If you want to reinstall it, consider using `--force`. */
                        error?: string;
                    };
                };
            };
            /** @description Error installing collection */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Unable to install the ansible collection: maxhoesel.smallstep */
                        error?: string;
                    };
                };
            };
        };
    };
    listUser: {
        parameters: {
            query?: {
                /** @description pass an optional userID to reset a specific user */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description search results matching criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserObject"][];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User to add */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserObject"];
            };
        };
        responses: {
            /** @description user created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserObject"] & {
                        /** @example JD.Vf{M@GC:w}YQ=1zv@gLLnDH:j3nI]l7@:ct:qPy9 */
                        apiKey?: string;
                    } & {
                        /** @example john-doe */
                        proxmoxUsername?: string;
                    };
                };
            };
            /** @description Error with request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example User with that name already exists */
                        error?: string;
                    };
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the users to delete */
                userID: components["schemas"]["userID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description user deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description userID not provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description user not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    passwordReset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User to add */
        requestBody?: {
            content: {
                "application/json": {
                    userID?: components["schemas"]["userID"];
                };
            };
        };
        responses: {
            /** @description user credentials updated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description invalid input, object invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCredentials: {
        parameters: {
            query?: {
                /** @description pass an optional userID to reset a specific user */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description proxmox credentials for the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: components["schemas"]["UserCredentialObject"];
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCredentials: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userID?: components["schemas"]["userID"];
                    /** @example 5cy5@plhik4g&Yk12sG */
                    proxmoxPassword?: string;
                };
            };
        };
        responses: {
            /** @description proxmox credentials for the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Your proxmox password has been successfully updated. */
                        result?: string;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAPIKey: {
        parameters: {
            query?: {
                /** @description pass an optional userID to reset a specific user */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ludus API key for the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: components["schemas"]["UserAPIKeyObject"];
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listAllUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description search results matching criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserObject"][];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getWireguardConfig: {
        parameters: {
            query?: {
                /** @description pass an optional userID to reset a specific user */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description a user's WireGuard configuration file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: {
                            /** @example [Interface]
                             *     PrivateKey = UJrxTNT4gkGQoJiltyjkC+Wi6m/VnY7YetjOYTjAWmc=
                             *     Address = 198.51.100.3/32
                             *
                             *     [Peer]
                             *     PublicKey = CHxW+36fC1g/cnBoSGGI0Shh/yMgbE9YgjC8p9zZnXw=
                             *     AllowedIPs = 10.3.0.0/16, 198.51.100.1/32
                             *     Endpoint = 198.18.0.25:51820
                             *     PersistentKeepalive = 25
                             *      */
                            wireGuardConfig?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    listRange: {
        parameters: {
            query?: {
                /** @description pass an optional userID to query.
                 *     Defaults to the user's range (admins can query other ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description search results matching criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeObject"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteRange: {
        parameters: {
            query?: {
                /** @description The id of the range to tear down (default: the calling user) */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Range destroy in progress */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Range destroy in progress */
                        result?: string;
                    };
                };
            };
        };
    };
    abortRange: {
        parameters: {
            query?: {
                /** @description pass an optional userID to query.
                 *     Defaults to the user's range (admins can query other ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description range deploy aborted */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description invalid input, object invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description error with abort */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listRangeTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description available tags */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listAllRange: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description search results matching criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeObject"][];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getConfig: {
        parameters: {
            query?: {
                /** @description pass an optional userID to get the config for.
                 *     Defaults to the user's range (admins can query other ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description search results matching criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ludus:
                         *       - vm_name: "JD-ad-dc-win2019-server-x64"
                         *         hostname: "JD-DC01-2019"
                         *         template: win2019-server-x64-template
                         *         ip_last_octet: 11
                         *         ram_gb: 2
                         *          cpus: 2
                         *         full_clone: false
                         *         windows:
                         *       - vm_name: "JD-ad-win10-21h1-enterprise-x64-1"
                         *         hostname: "JE-WIN10-21H1-1"
                         *         template: win10-21h1-x64-enterprise-template
                         *         ip_last_octet: 21
                         *         ram_gb: 2
                         *         cpus: 2
                         *         full_clone: false
                         *         windows:
                         *           install_additional_tools: true
                         *           office_version: 2016
                         *           office_arch: 64bit
                         *       - vm_name: "JD-ad-win10-21h1-enterprise-x64-2"
                         *         hostname: "JD-WIN10-21H1-2"
                         *         template: win10-21h1-x64-enterprise-template
                         *         ip_last_octet: 22
                         *         ram_gb: 2
                         *         cpus: 2
                         *         full_clone: false
                         *         windows:
                         *           install_additional_tools: true
                         *           office_version: "2019"
                         *           office_arch: 64bit
                         *       - vm_name: "JD-ad-win10-21h1-enterprise-x64-3"
                         *         hostname: "JD-WIN10-21H1-3"
                         *         template: win10-21h1-x64-enterprise-template
                         *         ip_last_octet: 23
                         *         ram_gb: 2
                         *         ram_max_gb: 4
                         *         ram_balloon: true
                         *         cpus: 2
                         *         full_clone: false
                         *         windows:
                         *           install_additional_tools: true
                         *           office_version: "2019"
                         *           office_arch: 64bit
                         *           visual_studio_version: "2019"
                         *      */
                        result?: unknown;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putConfig: {
        parameters: {
            query?: {
                /** @description pass an optional userID to query.
                 *     Defaults to the user's range (admins can query other ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: string;
                    /** @example false */
                    force?: boolean;
                };
            };
        };
        responses: {
            /** @description successfully updated configuration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getConfigExample: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description an example range configuration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example network:
                         *       inter_vlan_default: REJECT
                         *       rules:
                         *         - name: Only allow windows to kali on 443
                         *           vlan_src: 10
                         *           vlan_dst: 99
                         *           protocol: tcp
                         *           ports: 443
                         *           action: ACCEPT
                         *         - name: Allow kali to all windows
                         *           vlan_src: 99
                         *           vlan_dst: 10
                         *           protocol: all
                         *           ports: all
                         *           action: ACCEPT
                         *
                         *     ludus:
                         *       - vm_name: "{{ range_id }}-ad-dc-win2019-server-x64"
                         *         hostname: "{{ range_id }}-DC01-2019"
                         *         template: win2019-server-x64-template
                         *         vlan: 10
                         *         ip_last_octet: 11
                         *         ram_gb: 8
                         *         cpus: 4
                         *         windows:
                         *           sysprep: false
                         *         domain:
                         *           fqdn: ludus.domain
                         *           role: primary-dc
                         *     ...
                         *      */
                        result?: unknown;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deployRange: {
        parameters: {
            query?: {
                /** @description pass an optional userID to query.
                 *     Defaults to the user's range (admins can query other ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Range to deploy */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description the ansible tags to run for this deploy (default: all)
                     * @example all
                     */
                    tags?: string;
                    /**
                     * @description force the deployment if testing is enabled (default: false)
                     * @example false
                     */
                    force?: boolean;
                    /** @description limit the user defined roles to be run to this comma separated list of roles */
                    only_roles?: string[];
                    /**
                     * @description limit the deploy to VM that match the specified pattern (must include localhost or no plays will run)
                     * @example JD-kali1
                     */
                    limit?: string;
                };
            };
        };
        responses: {
            /** @description range deployed */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description invalid input, object invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description error with range deployment */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLogs: {
        parameters: {
            query?: {
                /** @description pass an optional userID to get the logs for.
                 *     Defaults to the user's range (admins can query other ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
                /** @description pass an optional number of lines to get
                 *      */
                tail?: {
                    /** @example 100 */
                    tail?: number;
                };
                /** @description the line number of the last line presented to the user;
                 *     return lines starting at the next line (if any)
                 *      */
                cursor?: {
                    /** @example 274 */
                    resumeline?: number;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ansible logs for the user and a cursor value of the last line returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 2022-12-06 16:11:11,810 p=2034571 u=john-doe n=ansible | PLAY [Acquire a session ticket for proxmox API] *****
                         *     2022-12-06 16:11:11,818 p=2034571 u=john-doe n=ansible | TASK [Gathering Facts] ******************************
                         *     2022-12-06 16:11:17,284 p=2034571 u=john-doe n=ansible | ok: [localhost] *************************************
                         *     2022-12-06 16:11:17,517 p=2034571 u=john-doe n=ansible | TASK [Acquire session ticket] ***********************
                         *     2022-12-06 16:11:18,028 p=2034571 u=john-doe n=ansible | changed: [localhost] ********************************
                         *     2022-12-06 16:11:18,282 p=2034571 u=john-doe n=ansible | PLAY [Valdation] ************************************
                         *     2022-12-06 16:11:18,628 p=2034571 u=john-doe n=ansible | PLAY [Set up a router VM] ***************************
                         *     2022-12-06 16:11:19,005 p=2034571 u=john-doe n=ansible | PLAY [Configure router] *****************************
                         *     2022-12-06 16:11:19,017 p=2034571 u=john-doe n=ansible | PLAY [Deploy test range DC VMs] *********************
                         *     ...
                         *      */
                        result?: string;
                        /** @example 274 */
                        cursor?: number;
                    };
                };
            };
        };
    };
    getEtcHosts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description a range /etc/hosts file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example # Ludus /etc/hosts
                         *     10.3.10.13     JD-ad-dc-win2012r2-server-x64
                         *     10.3.10.13     ad-dc-win2012r2-server-x64
                         *     10.3.10.12     JD-ad-dc-win2016-server-x64
                         *     10.3.10.12     ad-dc-win2016-server-x64
                         *     10.3.10.11     JD-ad-dc-win2019-server-x64
                         *     10.3.10.11     ad-dc-win2019-server-x64
                         *     10.3.10.21     JD-ad-win10-21h1-enterprise-x64-1
                         *     10.3.10.21     ad-win10-21h1-enterprise-x64-1
                         *     10.3.10.22     JD-ad-win10-21h1-enterprise-x64-2
                         *     10.3.10.22     ad-win10-21h1-enterprise-x64-2
                         *     10.3.10.23     JD-ad-win10-21h1-enterprise-x64-3
                         *     10.3.10.23     ad-win10-21h1-enterprise-x64-3
                         *     10.3.50.10     JD-gitlab
                         *     10.3.50.10     gitlab
                         *     10.3.40.11     JD-kali1
                         *     10.3.40.11     kali1
                         *     10.3.10.157    JD-macOS-test
                         *     10.3.10.157    macOS-test
                         *     10.3.50.11     JD-mattermost
                         *     10.3.50.11     meet.JE-mattermost
                         *     10.3.50.11     mattermost
                         *     10.3.50.13     JD-nextcloud
                         *     10.3.50.13     nextcloud
                         *     10.3.50.12     JD-redelk
                         *     10.3.50.12     redelk
                         *     10.3.30.11     JD-teamserver1
                         *     10.3.30.11     teamserver1
                         *     10.3.30.12     JD-teamserver2
                         *     10.3.30.12     teamserver2
                         *     10.3.30.13     JD-teamserver3
                         *     10.3.30.13     teamserver3
                         *     10.3.50.14     JD-winrunner
                         *     10.3.50.14     winrunner
                         *     10.3.50.254    ca
                         *      */
                        result?: string;
                    };
                };
            };
        };
    };
    getSSHConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description a range SSH configuration file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Host teamserver1
                         *       HostName 10.3.30.11
                         *       User debian
                         *       Port 22
                         *       IdentityFile ~/.ssh/ludus.key
                         *
                         *     Host teamserver2
                         *       HostName 10.3.30.12
                         *       User debian
                         *       Port 22
                         *       IdentityFile ~/.ssh/ludus.key
                         *      */
                        result?: string;
                    };
                };
            };
        };
    };
    getRDP: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description a zip file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example rdp.zip */
                    "application/zip": unknown;
                };
            };
        };
    };
    getAnsibleInventory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description an ansible inventory file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example all:
                         *       children:
                         *         ADMIN:
                         *           hosts:
                         *         JD:
                         *           hosts:
                         *             JD-ad-dc-win2019-server-x64:
                         *               ansible_connection: winrm
                         *               ansible_host: 10.2.10.11
                         *               ansible_password: password
                         *               ansible_user: localuser
                         *               ansible_winrm_scheme: https
                         *      */
                        result?: string;
                    };
                };
            };
        };
    };
    rangeAccessList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description an array of range access settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example JD */
                        targetUserID?: string;
                        sourceUserIDs?: string[];
                    }[];
                };
            };
            /** @description forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example This is an admin only endpoint or you queried another user and are not an admin */
                        error?: string;
                    };
                };
            };
        };
    };
    rangeAccessAction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description the action to take (must be either 'grant' or 'revoke')
                     * @example grant
                     */
                    action?: string;
                    /**
                     * @description the userID of the range that will be granting/revoking access to/from
                     * @example JD
                     */
                    targetUserID?: string;
                    /**
                     * @description the userID of the user that will be gaining/losing access
                     * @example JS
                     */
                    sourceUserID?: string;
                    /**
                     * @description force the access action even if the target router is inaccessible
                     * @example false
                     */
                    force?: boolean;
                };
            };
        };
        responses: {
            /** @description succesfuly granted or revoked access */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Range access to john doe's range granted to jane smith. Have jane smith pull an updated wireguard config. */
                        result?: string;
                    };
                };
            };
            /** @description forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example This is an admin only endpoint or you queried another user and are not an admin */
                        error?: string;
                    };
                };
            };
            /** @description not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example JS does not have access to JD */
                        error?: string;
                    };
                };
            };
        };
    };
    powerOnRange: {
        parameters: {
            query?: {
                /** @description pass an optional userID to query.
                 *     Defaults to the user's range (admins can interact with other users' ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Range to power on */
        requestBody?: {
            content: {
                "application/json": {
                    machines?: string[];
                };
            };
        };
        responses: {
            /** @description range VM(s) powered on */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example range VM power on in progress */
                        result?: string;
                    };
                };
            };
            /** @description error with range VM power on */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    powerOffRange: {
        parameters: {
            query?: {
                /** @description pass an optional userID to query.
                 *     Defaults to the user's range (admins can interact with other users' ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Range to power off */
        requestBody?: {
            content: {
                "application/json": {
                    machines?: string[];
                };
            };
        };
        responses: {
            /** @description range VM(s) powered off */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example range VM power off in progress */
                        result?: string;
                    };
                };
            };
            /** @description error with range VM power off */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    startTesting: {
        parameters: {
            query?: {
                /** @description pass an optional userID to get the start testing for.
                 *     Defaults to the user's range (admins can start testing on other ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description testing state entered */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description invalid input, object invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description error with testing start */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    stopTesting: {
        parameters: {
            query?: {
                /** @description pass an optional userID to get the stop testing for.
                 *     Defaults to the user's range (admins can stop testing on other ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Range to stop testing */
        requestBody?: {
            content: {
                "application/json": {
                    /** @example false */
                    force?: boolean;
                };
            };
        };
        responses: {
            /** @description testing state exited */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description invalid input, object invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description error with testing stop */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    allow: {
        parameters: {
            query?: {
                /** @description pass an optional userID to act on behalf of. Only admins can provide userIDs that are not their own.
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description domains or ips to allow */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AllowPayload"];
            };
        };
        responses: {
            /** @description domains or ips allowed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        allowed?: string[];
                        errors?: {
                            /** @example example.com */
                            item?: string;
                            /** @example already allowed */
                            reason?: string;
                        }[];
                    };
                };
            };
            /** @description invalid input, object invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description error with allowing domains or ips */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deny: {
        parameters: {
            query?: {
                /** @description pass an optional userID to act on behalf of. Only admins can provide userIDs that are not their own.
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description domains or ips to deny */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AllowPayload"];
            };
        };
        responses: {
            /** @description domains or ips denied */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        denied?: string[];
                        errors?: {
                            /** @example example.com */
                            item?: string;
                            /** @example was not allowed */
                            reason?: string;
                        }[];
                    };
                };
            };
            /** @description invalid input, object invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description error with allowing domains or ips */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update: {
        parameters: {
            query?: {
                /** @description pass an optional userID to act on behalf of. Only admins can provide userIDs that are not their own.
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description VM name or group name to update */
        requestBody?: {
            content: {
                "application/json": {
                    /** @example JD-win10-21h2-enterprise-x64 */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description VM update process started */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example update process started */
                        result?: string;
                    };
                };
            };
            /** @description error starting update process */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    antiSandboxEnable: {
        parameters: {
            query?: {
                /** @description pass an optional userID to act on behalf of. Only admins can provide userIDs that are not their own.
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description VM IDs or names to enable anti-sandbox
                     * @example 104,105
                     */
                    vmIDs?: string;
                    /**
                     * @description The string to use as the "RegisteredOwner" at HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion
                     * @example Acme Corp IT
                     */
                    registeredOwner?: string;
                    /**
                     * @description The string to use as the "RegisteredOrganization" at HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion
                     * @example Acme Corp
                     */
                    registeredOrganization?: string;
                    /**
                     * @description The computer vendor to use for all hardware values (currently only Dell is supported)
                     * @enum {string}
                     */
                    vendor?: "Dell";
                    /**
                     * @description If true, will drop a random assortment of files on the autologon_user's desktop and in the autologon_user's download folder (default false)
                     * @example true
                     */
                    dropFiles?: boolean;
                    /**
                     * @description The ProcessorNameString value to use for the VMs
                     * @example Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz
                     */
                    processorName?: string;
                    /**
                     * @description The VendorIdentifier value to use for the VMs (e.g. GenuineIntel or AuthenticAMD)")
                     * @example GenuineIntel
                     */
                    processorVendor?: string;
                    /**
                     * @description The ~Mhz value to use for the VMs in MHz
                     * @example 2600
                     */
                    processorSpeed?: string;
                    /**
                     * @description The Identifier value to use for the VMs
                     * @example Intel64 Family 6 Model 142 Stepping 10
                     */
                    processorIdentifier?: string;
                    /**
                     * @description The SystemBiosVersion value to use for the VMs
                     * @example 1.18.0
                     */
                    systemBiosVersion?: string;
                    /**
                     * @description Persist SystemBiosVersion and CPU the changes to the VMs via a non-obvious scheduled task
                     * @example true
                     */
                    persist?: boolean;
                };
            };
        };
        responses: {
            /** @description Anti-sandbox process completed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: string[];
                        errors?: {
                            /** @example 105 */
                            item?: string;
                            /** @example Failed to get VM state no status found */
                            reason?: string;
                        }[];
                    };
                };
            };
            /** @description Error enabling anti-sandbox for VM(s) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    antiSandboxInstallCustom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Anti-sandbox install completed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Anti-Sandbox QEMU and OVMF installed - will take effect on VM's next power cycle */
                        result?: string;
                    };
                };
            };
            /** @description Error installing anti-sandbox packages */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Error installing custom OMVF, check /tmp/anti-sandbox-debug.log: ... */
                        error?: string;
                    };
                };
            };
        };
    };
    antiSandboxInstallStandard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Anti-sandbox install completed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Standard QEMU and OVMF installed - will take effect on VM's next power cycle */
                        result?: string;
                    };
                };
            };
            /** @description Error installing anti-sandbox packages */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Error installing standard OMVF, check /tmp/anti-sandbox-debug.log: ... */
                        error?: string;
                    };
                };
            };
        };
    };
    getTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description template status array */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example debian-11-x64-server-template */
                        name?: string;
                        /** @example false */
                        built?: boolean;
                    }[];
                };
            };
            /** @description error getting templates */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addTemplateFromTar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: string;
                    /** @example false */
                    force?: boolean;
                };
            };
        };
        responses: {
            /** @description template added */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Successfully added template */
                        result?: string;
                    };
                };
            };
            /** @description Error adding template - bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Invalid boolean value */
                        error?: string;
                    };
                };
            };
            /** @description Error adding template - server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Unable to add the template: <error> */
                        error?: string;
                    };
                };
            };
        };
    };
    buildTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example debian-12-x64-server-template */
                    template?: string;
                    /** @example 3 */
                    parallel?: number;
                    /** @example false */
                    verbose?: boolean;
                };
            };
        };
        responses: {
            /** @description template builds started */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Template building started - this will take a while. Building 3 template(s) at a time. */
                        result?: string;
                    };
                };
            };
            /** @description Template not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Template not found */
                        error?: string;
                    };
                };
            };
            /** @description error starting template build */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTemplate: {
        parameters: {
            query?: {
                /** @description pass an optional userID to impersonate a user (admins only) */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path: {
                /** @description The name of the template to delete */
                name: {
                    /** @example ubuntu-22.04-x64-server */
                    templateName?: string;
                };
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Template removed */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Template removed */
                        result?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Template name not provided */
                        error?: string;
                    };
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Access denied. Users are not allowed to delete system templates */
                        error?: string;
                    };
                };
            };
            /** @description Template not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Template not found */
                        error?: string;
                    };
                };
            };
            /** @description Template conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Error removing template, it is in use by VMs */
                        error?: string;
                    };
                };
            };
        };
    };
    abortTemplates: {
        parameters: {
            query?: {
                /** @description Pass an optional userID to kill packer processes for.
                 *     Defaults to the user's range (admins can interact with other users' ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Packer processes killed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Packer process(es) aborted for user john-doe */
                        result?: string;
                    };
                };
            };
            /** @description error starting template build */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example No packer processes found for user john-doe */
                        error?: string;
                    };
                };
            };
        };
    };
    getPackerLogs: {
        parameters: {
            query?: {
                /** @description pass an optional userID to get the logs for.
                 *     Defaults to the user's range (admins can query other ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
                /** @description pass an optional number of lines to get
                 *      */
                tail?: {
                    /** @example 100 */
                    tail?: number;
                };
                /** @description the line number of the last line presented to the user;
                 *     return lines starting at the next line (if any)
                 *      */
                cursor?: {
                    /** @example 274 */
                    resumeline?: number;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description packer logs for the user and a cursor values of the last line returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 2023/01/29 14:57:40 Build debug mode: false
                         *     2023/01/29 14:57:40 Force build: false
                         *     2023/01/29 14:57:40 On error: abort
                         *     2023/01/29 14:57:40 Waiting on builds to complete...
                         *     2023/01/29 14:57:40 Starting build run: proxmox.debian10
                         *     2023/01/29 14:57:40 Running builder:
                         *     2023/01/29 14:57:40 [INFO] (telemetry) Starting builder proxmox.debian10
                         *     2023/01/29 14:57:40 packer-builder-proxmox plugin: using password auth
                         *     ...
                         *      */
                        result?: string;
                        /** @example 274 */
                        cursor?: number;
                    };
                };
            };
        };
    };
    getTemplatesStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description array of templates being built and the users who initiated the builds */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example debian-10-x64-server-template */
                        template?: string;
                        /** @example john-doe */
                        user?: string;
                    }[];
                };
            };
            /** @description error getting templates status */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSnapshots: {
        parameters: {
            query?: {
                /** @description pass an optional userID to get the logs for.
                 *     Defaults to the user's range (admins can query other ranges)
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
                /** @description pass an optional comma separated list of VMIDs to get the snapshots for
                 *      */
                vmids?: {
                    /** @example 100,101 */
                    vmids?: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description array of snapshots for a range */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        snapshots?: components["schemas"]["SnapshotInfo"][];
                        errors?: components["schemas"]["ErrorInfo"][];
                    };
                };
            };
            /** @description error getting snapshots */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    snapshotsTake: {
        parameters: {
            query?: {
                /** @description pass an optional userID to act on behalf of. Only admins can provide userIDs that are not their own.
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SnapshotCreatePayload"];
            };
        };
        responses: {
            /** @description snapshot success and error arrays */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: number[];
                        errors?: components["schemas"]["ErrorInfo"][];
                    };
                };
            };
            /** @description internal error creating snapshots */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    snapshotsRollback: {
        parameters: {
            query?: {
                /** @description pass an optional userID to act on behalf of. Only admins can provide userIDs that are not their own.
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Snapshot name
                     * @example My cool snapshot
                     */
                    name?: string;
                    /**
                     * @description Array of VMIDs to snapshot, if blank all VMs in the range will be snapshotted
                     * @example [
                     *       179,
                     *       180
                     *     ]
                     */
                    vmids?: number[];
                };
            };
        };
        responses: {
            /** @description snapshot success and error arrays */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: number[];
                        errors?: components["schemas"]["ErrorInfo"][];
                    };
                };
            };
            /** @description internal error rolling back snapshots */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    snapshotsRemove: {
        parameters: {
            query?: {
                /** @description pass an optional userID to act on behalf of. Only admins can provide userIDs that are not their own.
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Snapshot name
                     * @example My cool snapshot
                     */
                    name?: string;
                    /**
                     * @description Array of VMIDs to snapshot, if blank all VMs in the range will be snapshotted
                     * @example [
                     *       179,
                     *       180
                     *     ]
                     */
                    vmids?: number[];
                };
            };
        };
        responses: {
            /** @description snapshot success and error arrays */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: number[];
                        errors?: components["schemas"]["ErrorInfo"][];
                    };
                };
            };
            /** @description internal error creating snapshots */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    kmsInstall: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description KMS setup complete */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example KMS setup complete */
                        result?: string;
                    };
                };
            };
            /** @description Error installing KMS */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Task failed: ... */
                        error?: string;
                    };
                };
            };
        };
    };
    kmsLicense: {
        parameters: {
            query?: {
                /** @description pass an optional userID to act on behalf of. Only admins can provide userIDs that are not their own.
                 *      */
                userID?: {
                    userID?: components["schemas"]["userID"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The volume license product key to license the VMs with (if blank or not sent: determine from Windows version)
                     * @example TVRH6-WHNXV-R9WG3-9XRFY-MY832
                     */
                    productKey?: string;
                    /**
                     * @description Array of VMIDs to license
                     * @example [
                     *       179,
                     *       180
                     *     ]
                     */
                    vmids?: number[];
                };
            };
        };
        responses: {
            /** @description license success and error arrays */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: number[];
                        errors?: {
                            /**
                             * @description The vmID of the failed VM
                             * @example 180
                             */
                            item?: string;
                            /**
                             * @description The error message associated with the failed vmID
                             * @example Failed to run license-windows ansible playbook: ...
                             */
                            reason?: string;
                        }[];
                    };
                };
            };
            /** @description internal error creating snapshots */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listGroups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of groups */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        name?: string;
                        description?: string;
                    }[];
                };
            };
        };
    };
    createGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example Red Team */
                    name: string;
                    /** @example Red team group */
                    description?: string;
                };
            };
        };
        responses: {
            /** @description Group created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Group created successfully */
                        result?: string;
                    };
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Group deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addUserToGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: string;
                userID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User added to group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group or user not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeUserFromGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: string;
                userID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User removed from group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group or user not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addRangeToGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: string;
                rangeNumber: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Range added to group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group or range not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeRangeFromGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: string;
                rangeNumber: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Range removed from group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group or range not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listGroupMembers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of group members */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        userID?: string;
                        name?: string;
                    }[];
                };
            };
        };
    };
    listGroupRanges: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of group ranges */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rangeNumber?: number;
                        userID?: string;
                        rangeState?: string;
                    }[];
                };
            };
        };
    };
    createRange: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example Red Team Range */
                    name: string;
                    /** @example Range for red team */
                    description?: string;
                    /** @example Testing */
                    purpose?: string;
                    /** @example JD */
                    userID?: string;
                    /** @example 3 */
                    rangeNumber?: number;
                };
            };
        };
        responses: {
            /** @description Range created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    assignRangeToUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: string;
                rangeNumber: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Range assigned to user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Range or user not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    revokeRangeFromUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: string;
                rangeNumber: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Range revoked from user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Range or user not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listRangeUsers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rangeNumber: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of users assigned to the range */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        userID?: string;
                        name?: string;
                        type?: string;
                    }[];
                };
            };
        };
    };
    listUserAccessibleRanges: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of accessible ranges */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rangeNumber?: number;
                        userID?: string;
                        rangeState?: string;
                        accessType?: string;
                    }[];
                };
            };
        };
    };
    migrateSQLiteToPostgreSQL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Migration started */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Migration failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
